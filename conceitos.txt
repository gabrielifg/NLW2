ReactJS: É uma biblioteca focada na construção de interfaces. Tende a facilitar a construção de interfaces/layouts. Com html, css e js.

Ficou famoso com a SPA (Single page application) que retira a necessidade de recarregar toda a página quando o usuário navegar de uma tela para outra.

Ou seja, quando o usuário mudar de tela a única coisa que irá mudar é aquilo que for diferente de uma tela para a outra.

Pelo fato de o React ter se tornado um projeto muito grande, acabou que "nasceram" sub-projetos, como: ReactJS (web) /React Native (mobile)/ ReactTv / ReactVR e outros.
obs: sempre será instalado uma biblioteca padrão React que fará a comunicação entre a forma de se construir e a aplicação - suas especificidades, e a biblioteca padrão.
***Usa-se react-dom para usar o react dentro da web

*** react-scripts possui um conjunto de configurações que faz o react ser executado no browser. Ou seja, é um pacote que possui um conjunto de configurações que faz a conversão do codigo para que o navegador consiga entender.
Ferramentas: 

babel: faz por exemplo, a conversão de uma versão do js para uma versão inferior para que todos os browser consigam entender.

web-pack: automatização desse processo, inclusive permite a importação de outros tipos de arquivo pelo js.

*** (.lock) -> armazena a versão e bibliotecas que estão sendo usadas no nosso código.

*** Dom: árvore de elementos do html

** ReactDOM.render ==  injeta uma estrutura dentro de um elemento lá no html, estrutura que pode ser manipulada pelo js


*** COMPONENTES NO REACT SÃO: funções que retornam um html
obs: no react tudo é componente
obs2: componentes sempre com letras maiusculas

JSX == JS + XML

rem == é utilizado muito para aplicações responsinvas, que se adaptam a todos os dispositivos.

exemplo 1rem (quer dizer 9.6px)
rem deixa todo o layout mais fluido, padronizado e por consequência, facilita alterações, não precisando mexer em todos os elementos existentes... no projeto será utilizado 1.6rem